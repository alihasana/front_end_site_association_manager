{"ast":null,"code":"var _jsxFileName = \"/Users/Gio1378/Documents/_Cours_IMIE_1/VS/FinalProject2020/association-manager-front/src/App/layout/AdminLayout/index.js\";\nimport React, { Component, Suspense } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Fullscreen from \"react-full-screen\";\nimport windowSize from 'react-window-size';\nimport Navigation from './Navigation';\nimport NavBar from './NavBar';\nimport Breadcrumb from './Breadcrumb';\nimport Loader from \"../Loader\";\nimport routes from \"../../../routes\";\nimport Aux from \"../../../hoc/_Aux\";\nimport * as actionTypes from \"../../../store/actions\";\nimport './app.scss';\n\nclass AdminLayout extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fullScreenExitHandler = () => {\n      if (!document.fullscreenElement && !document.webkitIsFullScreen && !document.mozFullScreen && !document.msFullscreenElement) {\n        this.props.onFullScreenExit();\n      }\n    };\n  }\n\n  componentWillMount() {\n    if (this.props.windowWidth > 992 && this.props.windowWidth <= 1024 && this.props.layout !== 'horizontal') {\n      this.props.onComponentWillMount();\n    }\n  }\n\n  mobileOutClickHandler() {\n    if (this.props.windowWidth < 992 && this.props.collapseMenu) {\n      this.props.onComponentWillMount();\n    }\n  }\n\n  render() {\n    /* full screen exit call */\n    document.addEventListener('fullscreenchange', this.fullScreenExitHandler);\n    document.addEventListener('webkitfullscreenchange', this.fullScreenExitHandler);\n    document.addEventListener('mozfullscreenchange', this.fullScreenExitHandler);\n    document.addEventListener('MSFullscreenChange', this.fullScreenExitHandler);\n    const menu = routes.map((route, index) => {\n      return route.component ? React.createElement(Route, {\n        key: index,\n        path: route.path,\n        exact: route.exact,\n        name: route.name,\n        render: props => React.createElement(route.component, Object.assign({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }) : null;\n    });\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Fullscreen, {\n      enabled: this.props.isFullScreen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"pcoded-main-container\",\n      onClick: () => this.mobileOutClickHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"pcoded-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"pcoded-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"pcoded-inner-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Breadcrumb, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"main-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"page-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Suspense, {\n      fallback: React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, menu, React.createElement(Redirect, {\n      from: \"/\",\n      to: this.props.defaultPath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })))))))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    defaultPath: state.defaultPath,\n    isFullScreen: state.isFullScreen,\n    collapseMenu: state.collapseMenu,\n    configBlock: state.configBlock,\n    layout: state.layout\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFullScreenExit: () => dispatch({\n      type: actionTypes.FULL_SCREEN_EXIT\n    }),\n    onComponentWillMount: () => dispatch({\n      type: actionTypes.COLLAPSE_MENU\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(windowSize(AdminLayout));","map":{"version":3,"sources":["/Users/Gio1378/Documents/_Cours_IMIE_1/VS/FinalProject2020/association-manager-front/src/App/layout/AdminLayout/index.js"],"names":["React","Component","Suspense","Route","Switch","Redirect","connect","Fullscreen","windowSize","Navigation","NavBar","Breadcrumb","Loader","routes","Aux","actionTypes","AdminLayout","fullScreenExitHandler","document","fullscreenElement","webkitIsFullScreen","mozFullScreen","msFullscreenElement","props","onFullScreenExit","componentWillMount","windowWidth","layout","onComponentWillMount","mobileOutClickHandler","collapseMenu","render","addEventListener","menu","map","route","index","component","path","exact","name","isFullScreen","defaultPath","mapStateToProps","state","configBlock","mapDispatchToProps","dispatch","type","FULL_SCREEN_EXIT","COLLAPSE_MENU"],"mappings":"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","sourcesContent":["import React, { Component, Suspense } from 'react';\nimport {Route, Switch, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport Fullscreen from \"react-full-screen\";\nimport windowSize from 'react-window-size';\n\nimport Navigation from './Navigation';\nimport NavBar from './NavBar';\nimport Breadcrumb from './Breadcrumb';\nimport Loader from \"../Loader\";\nimport routes from \"../../../routes\";\nimport Aux from \"../../../hoc/_Aux\";\nimport * as actionTypes from \"../../../store/actions\";\n\nimport './app.scss';\n\nclass AdminLayout extends Component {\n\n    fullScreenExitHandler = () => {\n        if (!document.fullscreenElement && !document.webkitIsFullScreen && !document.mozFullScreen && !document.msFullscreenElement) {\n            this.props.onFullScreenExit();\n        }\n    };\n\n    componentWillMount() {\n        if (this.props.windowWidth > 992 && this.props.windowWidth <= 1024 && this.props.layout !== 'horizontal') {\n            this.props.onComponentWillMount();\n        }\n    }\n\n    mobileOutClickHandler() {\n        if (this.props.windowWidth < 992 && this.props.collapseMenu) {\n            this.props.onComponentWillMount();\n        }\n    }\n\n    render() {\n\n        /* full screen exit call */\n        document.addEventListener('fullscreenchange', this.fullScreenExitHandler);\n        document.addEventListener('webkitfullscreenchange', this.fullScreenExitHandler);\n        document.addEventListener('mozfullscreenchange', this.fullScreenExitHandler);\n        document.addEventListener('MSFullscreenChange', this.fullScreenExitHandler);\n\n        const menu = routes.map((route, index) => {\n            return (route.component) ? (\n                <Route\n                    key={index}\n                    path={route.path}\n                    exact={route.exact}\n                    name={route.name}\n                    render={props => (\n                        <route.component {...props} />\n                    )} />\n            ) : (null);\n        });\n\n        return (\n            <Aux>\n                <Fullscreen enabled={this.props.isFullScreen}>\n                    <Navigation />\n                    <NavBar />\n                    <div className=\"pcoded-main-container\" onClick={() => this.mobileOutClickHandler}>\n                        <div className=\"pcoded-wrapper\">\n                            <div className=\"pcoded-content\">\n                                <div className=\"pcoded-inner-content\">\n                                    <Breadcrumb />\n                                    <div className=\"main-body\">\n                                        <div className=\"page-wrapper\">\n                                            <Suspense fallback={<Loader/>}>\n                                                <Switch>\n                                                    {menu}\n                                                    <Redirect from=\"/\" to={this.props.defaultPath} />\n                                                </Switch>\n                                            </Suspense>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Fullscreen>\n            </Aux>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        defaultPath: state.defaultPath,\n        isFullScreen: state.isFullScreen,\n        collapseMenu: state.collapseMenu,\n        configBlock: state.configBlock,\n        layout: state.layout\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFullScreenExit: () => dispatch({type: actionTypes.FULL_SCREEN_EXIT}),\n        onComponentWillMount: () => dispatch({type: actionTypes.COLLAPSE_MENU})\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps) (windowSize(AdminLayout));"]},"metadata":{},"sourceType":"module"}