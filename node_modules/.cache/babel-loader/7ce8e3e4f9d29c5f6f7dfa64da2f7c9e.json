{"ast":null,"code":"var _jsxFileName = \"/Users/Gio1378/Documents/_Cours_IMIE_1/VS/FinalProject2020/association-manager-front/src/App/layout/AdminLayout/Navigation/NavContent/NavItem/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport windowSize from 'react-window-size';\nimport Aux from \"../../../../../../hoc/_Aux\";\nimport NavIcon from \"./../NavIcon\";\nimport NavBadge from \"./../NavBadge\";\nimport * as actionTypes from \"../../../../../../store/actions\";\n\nclass NavItem extends Component {\n  render() {\n    let itemTitle = this.props.item.title;\n\n    if (this.props.item.icon) {\n      itemTitle = React.createElement(\"span\", {\n        className: \"pcoded-mtext\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, this.props.item.title);\n    }\n\n    let itemTarget = '';\n\n    if (this.props.item.target) {\n      itemTarget = '_blank';\n    }\n\n    let subContent;\n\n    if (this.props.item.external) {\n      subContent = React.createElement(\"a\", {\n        href: this.props.item.url,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(NavIcon, {\n        items: this.props.item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }), itemTitle, React.createElement(NavBadge, {\n        layout: this.props.layout,\n        items: this.props.item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }));\n    } else {\n      subContent = React.createElement(NavLink, {\n        to: this.props.item.url,\n        className: \"nav-link\",\n        exact: true,\n        target: itemTarget,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(NavIcon, {\n        items: this.props.item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), itemTitle, React.createElement(NavBadge, {\n        layout: this.props.layout,\n        items: this.props.item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }));\n    }\n\n    let mainContent = '';\n\n    if (this.props.layout === 'horizontal') {\n      mainContent = React.createElement(\"li\", {\n        onClick: this.props.onItemLeave,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, subContent);\n    } else {\n      if (this.props.windowWidth < 992) {\n        mainContent = React.createElement(\"li\", {\n          className: this.props.item.classes,\n          onClick: this.props.onItemClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, subContent);\n      } else {\n        mainContent = React.createElement(\"li\", {\n          className: this.props.item.classes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, subContent);\n      }\n    }\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, mainContent);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    layout: state.layout,\n    collapseMenu: state.collapseMenu\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onItemClick: () => dispatch({\n      type: actionTypes.COLLAPSE_MENU\n    }),\n    onItemLeave: () => dispatch({\n      type: actionTypes.NAV_CONTENT_LEAVE\n    })\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(windowSize(NavItem)));","map":{"version":3,"sources":["/Users/Gio1378/Documents/_Cours_IMIE_1/VS/FinalProject2020/association-manager-front/src/App/layout/AdminLayout/Navigation/NavContent/NavItem/index.js"],"names":["React","Component","connect","NavLink","withRouter","windowSize","Aux","NavIcon","NavBadge","actionTypes","NavItem","render","itemTitle","props","item","title","icon","itemTarget","target","subContent","external","url","layout","mainContent","onItemLeave","windowWidth","classes","onItemClick","mapStateToProps","state","collapseMenu","mapDispatchToProps","dispatch","type","COLLAPSE_MENU","NAV_CONTENT_LEAVE"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {NavLink} from 'react-router-dom';\nimport {withRouter} from 'react-router-dom';\nimport windowSize from 'react-window-size';\n\nimport Aux from \"../../../../../../hoc/_Aux\";\nimport NavIcon from \"./../NavIcon\";\nimport NavBadge from \"./../NavBadge\";\nimport * as actionTypes from \"../../../../../../store/actions\";\n\nclass NavItem extends Component {\n\n    render() {\n        let itemTitle = this.props.item.title;\n        if (this.props.item.icon) {\n            itemTitle = <span className=\"pcoded-mtext\">{this.props.item.title}</span>;\n        }\n\n        let itemTarget = '';\n        if (this.props.item.target) {\n            itemTarget = '_blank';\n        }\n\n        let subContent;\n        if(this.props.item.external) {\n            subContent = (\n                <a href={this.props.item.url} target='_blank' rel='noopener noreferrer'>\n                    <NavIcon items={this.props.item}/>\n                    {itemTitle}\n                    <NavBadge layout={this.props.layout} items={this.props.item}/>\n                </a>\n            );\n        } else {\n            subContent = (\n                <NavLink to={this.props.item.url} className=\"nav-link\" exact={true} target={itemTarget}>\n                    <NavIcon items={this.props.item}/>\n                    {itemTitle}\n                    <NavBadge layout={this.props.layout} items={this.props.item}/>\n                </NavLink>\n            );\n        }\n        let mainContent = '';\n        if (this.props.layout === 'horizontal') {\n            mainContent = (\n                <li onClick={this.props.onItemLeave}>{subContent}</li>\n            );\n        } else {\n            if (this.props.windowWidth < 992) {\n                mainContent = (\n                    <li className={this.props.item.classes} onClick={this.props.onItemClick}>{subContent}</li>\n                );\n            } else {\n                mainContent = (\n                    <li className={this.props.item.classes}>{subContent}</li>\n                );\n            }\n        }\n\n        return (\n            <Aux>\n                {mainContent}\n            </Aux>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        layout: state.layout,\n        collapseMenu: state.collapseMenu\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onItemClick: () => dispatch({type: actionTypes.COLLAPSE_MENU}),\n        onItemLeave: () => dispatch({type: actionTypes.NAV_CONTENT_LEAVE})\n    }\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps) (windowSize(NavItem)));\n"]},"metadata":{},"sourceType":"module"}